name: Build Release

on:
  push:
    branches:
      - main

jobs:
  build:
    strategy:
      matrix:
        targetplatform: [x64]
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4

    - name: Set Release Version (YYYY.MM.DD)
      id: set_version
      shell: pwsh
      run: |
        $version = Get-Date -Format "yyyy.MM.dd"
        echo "RELEASE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

    - name: Build all binaries
      run: |
        for /D %%D in (cmd/*) do (
          cd %%D
          go build -v -ldflags="`
            -X github.com/rodchristiansen/gorilla/pkg/version.appName=%%~nxD`
            -X github.com/rodchristiansen/gorilla/pkg/version.version=${{ env.RELEASE_VERSION }}`
            -X github.com/rodchristiansen/gorilla/pkg/version.branch=${{ github.ref_name }}`
            -X github.com/rodchristiansen/gorilla/pkg/version.buildDate=$(Get-Date -Format s)`
            -X github.com/rodchristiansen/gorilla/pkg/version.revision=$(git rev-parse HEAD)"
        )
        
    - name: Package Binaries
      run: |
        mkdir -p release
        move cmd/*/bin/*.exe release/
        tar -czvf release.tar.gz release/

    - name: Create Release
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create $env:RELEASE_VERSION cmd/*/*.exe `
          --title "Gorilla v$env:RELEASE_VERSION" `
          --notes "Automated release for $env:RELEASE_VERSION."
