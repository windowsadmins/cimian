name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        targetplatform: [x64]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install NuGet
        run: |
          if (-not (Get-Command nuget.exe -ErrorAction SilentlyContinue)) {
            choco install nuget.commandline --no-progress --yes
          } else {
            Write-Host "NuGet is already installed."
          }

      - name: Install IntuneWinAppUtil
        run: |
          if (-not (Get-Command IntuneWinAppUtil.exe -ErrorAction SilentlyContinue)) {
            choco install intunewinapputil --no-progress --yes
          } else {
            Write-Host "IntuneWinAppUtil is already installed."
          }

      - name: Check for WiX Installation
        run: |
          if (-not (Test-Path "C:\Program Files (x86)\WiX Toolset v3.14\bin\candle.exe")) {
            choco install wixtoolset --version=3.14 --no-progress --yes --force
          } else {
            Write-Host "WiX Toolset v3.14 is already installed."
          }

      - name: Set up Go Environment
        uses: actions/setup-go@v4
        with:
          go-version: 1.23.0

      - name: Prepare Release Version
        id: set_version
        shell: pwsh
        run: |
          $fullVersion = Get-Date -Format "yyyy.MM.dd"
          echo "RELEASE_VERSION=$fullVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8

          $year = (Get-Date).Year - 2000
          $semanticVersion = "{0}.{1}.{2}" -f $year, (Get-Date).Month, (Get-Date).Day          
          echo "SEMANTIC_VERSION=$semanticVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build All Binaries
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $projects = Get-ChildItem -Directory -Path cmd/* -Recurse
          foreach ($project in $projects) {
            cd $project.FullName
            $binaryName = $project.Name
            go build -v -o bin\$binaryName.exe -ldflags=@"
              -X github.com/rodchristiansen/gorilla/pkg/version.appName=$binaryName `
              -X github.com/rodchristiansen/gorilla/pkg/version.version=${{ env.RELEASE_VERSION }} `
              -X github.com/rodchristiansen/gorilla/pkg/version.branch=${{ github.ref_name }} `
              -X github.com/rodchristiansen/gorilla/pkg/version.buildDate=$(Get-Date -Format s) `
              -X github.com/rodchristiansen/gorilla/pkg/version.revision=$(git rev-parse HEAD)
            "@
          }          
          cd ${{ github.workspace }} # Reset to root after builds

      - name: Package Binaries
        shell: pwsh
        run: |
          mkdir -p release
          Get-ChildItem -Path cmd/*/bin/*.exe | ForEach-Object {
            Copy-Item $_.FullName release/
          }
          tar -czvf release.tar.gz -C release .

      - name: Build MSI Package with WiX
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $semanticVersion = $env:SEMANTIC_VERSION
          Write-Host "SemanticVersion is $semanticVersion"
          & "C:\Program Files (x86)\WiX Toolset v3.14\bin\candle.exe" -ext WixUtilExtension.dll -o build/msi.wixobj build/msi.wxs
          & "C:\Program Files (x86)\WiX Toolset v3.14\bin\light.exe" -ext WixUtilExtension.dll -v -o release/gorilla.msi build/msi.wixobj

      - name: Prepare NuGet Package
        shell: pwsh
        run: |
          Copy-Item build/nupkg.ps1 -Destination build/install.ps1          
          $version = $env:SEMANTIC_VERSION
          (Get-Content build/nupkg.nuspec) -replace '\$\{\{ env\.SEMANTIC_VERSION \}\}', $version | Set-Content build/nupkg.nuspec
          nuget pack build/nupkg.nuspec -OutputDirectory release -BasePath $PWD

      - name: Prepare IntuneWin Package
        shell: pwsh
        run: |
          pwsh build/intunewin.ps1 -SetupFolder release -SetupFile release/gorilla.msi -OutputFolder release

      - name: Verify Generated Files
        shell: pwsh
        run: |
          if (-not (Get-ChildItem release)) {
            Write-Error "No files generated in release folder!"
            exit 1
          }
          Get-ChildItem release

      - name: Create GitHub Release
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = $env:RELEASE_VERSION
          $semanticVersion = $env:SEMANTIC_VERSION
          
          # Prepare the release files by renaming them in place during the release step
          $releaseFiles = Get-ChildItem -Path release/* | ForEach-Object {
            $newFileName = $_.FullName
            if ($_.Name -eq "gorilla.msi") {
              $newFileName = Join-Path -Path $_.DirectoryName -ChildPath "Gorilla-$version$($_.Extension)"
              if ($_.FullName -ne $newFileName) {
                Write-Host "Renaming '$($_.FullName)' to '$newFileName'"
                Rename-Item -Path $_.FullName -NewName $newFileName
              }
            } elseif ($_.Name -eq "gorilla.intunewin") {
              $newFileName = Join-Path -Path $_.DirectoryName -ChildPath "Gorilla-$version$($_.Extension)"
              if ($_.FullName -ne $newFileName) {
                Write-Host "Renaming '$($_.FullName)' to '$newFileName'"
                Rename-Item -Path $_.FullName -NewName $newFileName
              }
            } elseif ($_.Name -eq "com.github.windowsadmins.gorilla.$semanticVersion.nupkg") {
              $newFileName = Join-Path -Path $_.DirectoryName -ChildPath "Gorilla-$version.nupkg"
              if ($_.FullName -ne $newFileName) {
                Write-Host "Renaming '$($_.FullName)' to '$newFileName'"
                Rename-Item -Path $_.FullName -NewName $newFileName
              }
            } else {
              Write-Host "No action taken for '$($_.FullName)'"
            }
            return $newFileName -replace '\\', '/'
          }
          
          # Prepare the packages
          $releaseFiles = @(
            "release/Gorilla-$version.msi",
            "release/Gorilla-$version.intunewin",
            "release/Gorilla-$version.nupkg"
          )
      
          # Publish the release with the selected files and source code
          gh release create $version @($releaseFiles) `
            --title "Gorilla v$version" `
            --notes "Automated release for version $version." `
            --generate-notes
